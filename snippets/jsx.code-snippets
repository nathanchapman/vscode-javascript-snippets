{
  // React (JS)
  "component static prop types": {
    "prefix": "propTypes",
    "body": "static propTypes = {$0}",
    "description": "Component Static Prop Types"
  },
  "component static default props": {
    "prefix": "defaultProps",
    "body": "static defaultProps = {$0}",
    "description": "Component Static Default Props"
  },
  "component static get derived state from props": {
    "prefix": "getDerivedStateFromProps",
    "body": "static getDerivedStateFromProps(${1:nextProps}, ${2:prevState}) {$0}",
    "description": "Component Static Get Derived State From Props"
  },
  "component set state": {
    "prefix": "setState",
    "body": "this.setState($1)$0"
  },
  "component constructor": {
    "prefix": "constructor",
    "body": [
      "constructor(${1:props}) {",
      "\tsuper(${1:props})",
      "",
      "\t$4",
      "}"
    ]
  },
  "component will mount": {
    "prefix": "componentWillMount",
    "body": "componentWillMount() {$0}",
    "description": "DEPRECATION WARNING [v16.3]: Use `componentDidMount` instead."
  },
  "component did mount": {
    "prefix": "componentDidMount",
    "body": "componentDidMount() {$0}"
  },
  "component will receive props": {
    "prefix": "componentWillReceiveProps",
    "body": "componentWillReceiveProps(${1:nextProps}) {$0}",
    "description": "DEPRECATION WARNING [v16.3]: Use `static getDerivedStateFromProps` instead."
  },
  "should component update": {
    "prefix": "shouldComponentUpdate",
    "body": "shouldComponentUpdate(${1:nextProps}, ${2:nextState}) {$0}"
  },
  "component will update": {
    "prefix": "componentWillUpdate",
    "body": "componentWillUpdate(${1:nextProps}, ${2:nextState}) {$0}",
    "description": "DEPRECATION WARNING [v16.3]: Use `componentDidUpdate` instead."
  },
  "component did update": {
    "prefix": "componentDidUpdate",
    "body": "componentDidUpdate(${1:nextProps}, ${2:state}) {$0}"
  },
  "component will unmount": {
    "prefix": "componentWillUnmount",
    "body": "componentWillUnmount() {$0}"
  },
  "component did catch": {
    "prefix": "componentDidCatch",
    "body": "componentDidCatch(${1:error}, ${2:errorInfo}) {$0}"
  },
  "component render": {
    "prefix": "render",
    "body": ["render() {", "\treturn ($0)", "}"]
  }
}
